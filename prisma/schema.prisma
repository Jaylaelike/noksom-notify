generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Subscription {
  id             Int       @id @default(autoincrement())
  endpoint       String    @unique
  p256dh         String
  auth           String
  expirationTime String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  // Add relation to rooms
  rooms          RoomSubscription[]
}

model Notification {
  id        Int       @id @default(autoincrement())
  title     String
  body      String
  icon      String?
  data      String?   // JSON string
  createdAt DateTime  @default(now())
  // Add relation to room
  roomId    Int?
  room      Room?     @relation(fields: [roomId], references: [id])
}

model Config {
  id        Int       @id @default(autoincrement())
  endpoint  String
  authKey   String?
  headers   String?   // JSON string
  payload   String?   // JSON string
  updatedAt DateTime  @updatedAt
}

// New model for notification rooms/topics
model Room {
  id            Int       @id @default(autoincrement())
  name          String
  description   String?
  tokenId       String    @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Owner
  userId        Int
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relations
  notifications Notification[]
  subscriptions RoomSubscription[]

  @@index([userId])
}

// Junction table for many-to-many relationship between rooms and subscriptions
model RoomSubscription {
  id             Int          @id @default(autoincrement())
  roomId         Int
  subscriptionId Int
  createdAt      DateTime     @default(now())
  // Relations
  room           Room         @relation(fields: [roomId], references: [id], onDelete: Cascade)
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@unique([roomId, subscriptionId])
}
// NextAuth models for authentication
model User {
  id             Int       @id @default(autoincrement())
  name           String?
  email          String?   @unique
  hashedPassword String?
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  // Rooms owned by the user
  rooms          Room[]
}

model Account {
  id                 Int       @id @default(autoincrement())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int       @id @default(autoincrement())
  sessionToken String    @unique
  userId       Int
  expires      DateTime
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String    @unique
  expires    DateTime

  @@unique([identifier, token])
}
